<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox1.Text" xml:space="preserve">
    <value>    Доска 8х8, шашки занимают первые три ряда с каждой стороны; бить можно произвольное количество шашек в любых направлениях; простая ходит только вперед, но может бить назад, дамка может ходить на любое число полей; цель игры - съесть или запереть все шашки противника.

«Простая шашка может совершать, в зависимости от позиции, ходы типов: тихие и ударные.»:
    Тихий ход - перемещение на одно поле вперед по диагонали. Тихий ход возможен, если соответствующее поле свободно и нигде на доске не требуется выполнить взятие шашки противника. Например, правильным ходом из начальной позиции будет движение шашки с поля c3 например на d4 (в нотации партии это обозначается как c3-d4), или на b4 (c3-b4).
    Ударный ход (бой шашки противника) - перемещение на два поля вперед или назад по диагонали, через шашку противника. Шашка при своем ходе обязана побить (взять) шашку противника, если та находится на соседнем (по диагонали) поле и если следующее за ней поле свободно. Берущая шашка становится на это свободное поле, перескакивая через вражескую шашку, которая снимается с доски. Взятие может совершаться не только вперед, но и назад.
    Если после взятия одной шашки оказывается возможным побить еще одну шашку противника, взятие продолжается, то есть в один прием (за один ход) шашка должна побить столько шашек соперника, сколько их стоит на ее пути. Взятия в русских шашках обязательны.

    При возможности взятия в разных направлениях выбор, вне зависимости от количества или качества снимаемых шашек, предоставляется берущему игроку. При взятии нескольких шашек противника снимать их с доски можно только после завершения своего ударного хода.

    Запрещается при взятии перескакивать более одного раза бьющей шашкой (дамкой) через одну и ту же шашку соперника (а вот на свободное поле наступать несколько раз разрешается).


«Дамки»:   
    Если простая шашка достигает последней горизонтали, она становится дамкой. Дамки, в отличие от обычных шашек, способны перемещаться на произвольное количество полей по выбранной диагонали, причем как вперед, так и назад.

    Дамка при своем ходе обязана взять шашку соперника (как вперед, так и назад) независимо от количества свободных полей до нее, если только эта шашка находится на одной диагонали с дамкой и за этой шашкой имеется одно или несколько свободных полей. Причем в последнем случае дамка, совершив взятие шашки противника, может остановиться на любом из них.

     Если же при взятии на любой из пересекающихся диагоналей также находятся шашки соперника, за которыми имеются свободные поля, то дамка обязана продолжать взятие и этих шашек, сколько бы их ни находилось на ее пути.

    Так же, как и в случае с простыми шашками, при наличии нескольких способов выполнения ударного хода (одной и той же или разными дамками), выбор последнего остается за берущим игроком.

    Если обычная шашка достигает последней горизонтали в результате боя шашки противника (где ей полагается превращаться в дамку), и если ей предоставляется возможность дальнейшего взятия вражеских шашек, то она обязана тем же ходом продолжать бой, но уже на правах дамки.

    Обратите внимание: это правило действует лишь в том случае, если шашка достигает последней горизонтали в результате ударного хода. В случае, если простая шашка достигнет последнего ряда без взятия и ей после этого представится возможность боя, то она должна бить (если такая возможность сохранится) лишь следующим ходом.
</value>
  </data>
</root>